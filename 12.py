#!/usr/bin/python -tt
import math
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# SOLUTION NOTE:
# 2/4/1012
# There's a famous algorithm to calculate the number of divisors of a certain number by prime-factorized it
# However I did it a kinda brute force way to get the right number first. It took me about 5 minutes.


i = 1 # number
n = 1 # current triangle number

def get_next_triangle_number():
    # described as function name
    global n,i
    i += 1
    n += i

def get_divisor_number(n):
    # described as function name
    # implemented in a trivial and kinda stupid way
    fact = [1,n]
    check = 2
    rootn = math.sqrt(n)
    while check < rootn:
        if n%check == 0:
            # check is a factor
            fact.append(check)
            fact.append(n/check)
        check += 1
    if rootn == check:
        fact.append(check)
    return len(fact)

while get_divisor_number(n) <= 500:
    get_next_triangle_number()

print n,i
